<?php
/**
 * MagoArab_PhoneMailer
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   MagoArab
 * @package    MagoArab_PhoneMailer
 * @copyright  Copyright Â© 2025 MagoArab (https://www.magoarab.com)
 * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */

namespace MagoArab\PhoneMailer\Helper;

use Magento\Framework\App\Helper\AbstractHelper;
use Magento\Framework\App\Helper\Context;
use Magento\Store\Model\StoreManagerInterface;
use Psr\Log\LoggerInterface;

class EmailGenerator extends AbstractHelper
{
    /**
     * @var StoreManagerInterface
     */
    protected $storeManager;

    /**
     * @var Config
     */
    protected $config;

    /**
     * @var LoggerInterface
     */
    protected $logger;

    /**
     * EmailGenerator constructor.
     *
     * @param Context $context
     * @param StoreManagerInterface $storeManager
     * @param Config $config
     * @param LoggerInterface $logger
     */
    public function __construct(
        Context $context,
        StoreManagerInterface $storeManager,
        Config $config,
        LoggerInterface $logger
    ) {
        $this->storeManager = $storeManager;
        $this->config = $config;
        $this->logger = $logger;
        parent::__construct($context);
    }

    /**
     * Generate email from phone number
     *
     * @param string $phoneNumber
     * @param int|null $storeId
     * @return string
     * @throws \Exception
     */
    public function generateEmailFromPhone($phoneNumber, $storeId = null)
    {
        if (empty($phoneNumber)) {
            throw new \Exception(__('Phone number is required to generate email.'));
        }
        
        try {
            // Clean the phone number (remove spaces, dashes, etc.)
            $cleanPhone = preg_replace('/[^0-9]/', '', $phoneNumber);
            
            if (empty($cleanPhone)) {
                throw new \Exception(__('Invalid phone number format.'));
            }
            
            // Get domain based on configuration
            $domain = $this->getDomain($storeId);
            
            // Generate email
            $email = $cleanPhone . '@' . $domain;
            
            $this->logger->debug('PhoneMailer: Generated email ' . $email . ' from phone ' . $phoneNumber);
            
            return $email;
        } catch (\Exception $e) {
            $this->logger->error('PhoneMailer: Error generating email: ' . $e->getMessage());
            throw $e;
        }
    }

    /**
     * Get domain from configuration or auto-detect from store URL
     *
     * @param int|null $storeId
     * @return string
     * @throws \Exception
     */
    public function getDomain($storeId = null)
    {
        try {
            $domainMode = $this->config->getDomainMode($storeId);
            
            // If custom domain is selected, return it
            if ($domainMode == 'custom') {
                $customDomain = $this->config->getCustomDomain($storeId);
                
                if (empty($customDomain)) {
                    throw new \Exception(__('Custom domain is not configured.'));
                }
                
                return $customDomain;
            }
            
            // Otherwise, use store URL
            $baseUrl = $this->storeManager->getStore($storeId)->getBaseUrl();
            $host = parse_url($baseUrl, PHP_URL_HOST);
            
            // Remove www. if present
            $domain = preg_replace('/^www\./', '', $host);
            
            if (empty($domain)) {
                throw new \Exception(__('Could not determine domain from store URL.'));
            }
            
            return $domain;
        } catch (\Exception $e) {
            $this->logger->error('PhoneMailer: Failed to get domain: ' . $e->getMessage());
            
            // Fallback to default domain if configured
            $fallbackDomain = $this->config->getCustomDomain($storeId);
            
            if ($fallbackDomain) {
                return $fallbackDomain;
            }
            
            throw new \Exception(__('Failed to determine email domain.'));
        }
    }

    /**
     * Check if an email was generated by the module
     *
     * @param string $email
     * @param int|null $storeId
     * @return bool
     */
    public function isGeneratedEmail($email, $storeId = null)
    {
        try {
            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                return false;
            }
            
            // Extract username part (before @)
            $parts = explode('@', $email);
            $username = $parts[0];
            
            // If username consists only of numbers, it's likely a generated email
            if (preg_match('/^[0-9]+$/', $username)) {
                // Get the domain
                $domain = $parts[1];
                
                // Check if domain matches store domain or custom domain
                $storeDomain = $this->getDomain($storeId);
                
                return ($domain === $storeDomain);
            }
            
            return false;
        } catch (\Exception $e) {
            $this->logger->error('PhoneMailer: Error checking generated email: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Extract phone number from generated email
     *
     * @param string $email
     * @return string|null
     */
    public function extractPhoneFromEmail($email)
    {
        try {
            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                return null;
            }
            
            // Extract username part (before @)
            $parts = explode('@', $email);
            $username = $parts[0];
            
            // If username consists only of numbers, it's likely a phone number
            if (preg_match('/^[0-9]+$/', $username)) {
                return $username;
            }
            
            return null;
        } catch (\Exception $e) {
            $this->logger->error('PhoneMailer: Error extracting phone from email: ' . $e->getMessage());
            return null;
        }
    }
}